#!/usr/bin/env node

"use strict";

const fs = require("fs");
const termcolors = require("termcolors");
const pkg = require("../package.json");
const palette = fs.readFileSync("./palette.json", "utf8");
const colors = termcolors.json.import(palette);
const program = require("commander");
const _ = require("lodash");
const process = require("process");

const formats = ["alacritty", "pantheon", "iterm", "genode", "tilix", "xfce", "gnome", "guake", "kitty"];

const toHex = _.partialRight(_.mapValues, function(color) {
  return color.toHex();
});

const toHexSlice = _.partialRight(_.mapValues, function(color) {
  return color.toHex().slice(1);
});

const toHexUpper = _.partialRight(_.mapValues, function(color) {
  return color.toHex().toUpperCase();
});

const toAvgRgbArray = _.partialRight(_.mapValues, function(color) {
  return color.toAvgRgbArray();
});

const toDoubleHex = _.partialRight(_.mapValues, function(color) {
  return color.toDoubleHex();
});

function createConfigFunction(location, colorFn) {
  return function() {
    const file = fs.readFileSync(location, "utf8");
    const template = termcolors.export(file, colorFn);
    const data = template(colors);
    process.stdout.write(data);
    process.exit();
  };
}

const alacrittyConfig = createConfigFunction("./templates/alacritty.dot", toHexSlice);
const pantheonConfig = createConfigFunction("./templates/pantheon.dot", toHex);
const itermConfig    = createConfigFunction("./templates/iterm.dot", toAvgRgbArray);
const genodeConfig   = createConfigFunction("./templates/genode.dot", toHexUpper);
const tilixConfig    = createConfigFunction("./templates/tilix.dot", toHexUpper);
const xfceConfig     = createConfigFunction("./templates/xfce.dot", toDoubleHex);
const gnomeConfig    = createConfigFunction("./templates/gnome.dot", toHex);
const guakeConfig    = createConfigFunction("./templates/guake.dot", toDoubleHex);
const kittyConfig    = createConfigFunction("./templates/kitty.dot", toHexUpper);

program
  .version(pkg.version)
  .option('-l, --list', 'List available formats')
  .option('-o, --output [format]', 'Output format')
  .parse(process.argv);

if (program.list) {
  for (let i = 0; i < formats.length; i++) {
    console.log(formats[i]);
  }
  process.exit();
}

if (!program.output) {
  console.log('Must declare an output format');
  process.exit(1);
}

if (!formats.includes(program.output)) {
  console.log('Invalid output format: ', program.output);
  process.exit(1);
}

switch (program.output) {
case "alacritty":
  alacrittyConfig();
  break;
case "pantheon":
  pantheonConfig();
  break;
case "iterm":
  itermConfig();
  break;
case "genode":
  genodeConfig();
  break;
case "tilix":
  tilixConfig();
  break;
case "xfce":
  xfceConfig();
  break;
case "gnome":
  gnomeConfig();
  break;
case "guake":
  guakeConfig();
  break;
case "kitty":
  kittyConfig();
  break;
}
