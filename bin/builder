#!/usr/bin/env node

"use strict";

const fs = require("fs");
const termcolors = require("termcolors");
const pkg = require("../package.json");
const palette = fs.readFileSync("./palette.json", "utf8");
const colors = termcolors.json.import(palette);
const program = require("commander");
const _ = require("lodash");
const process = require("process");

const formats = ["alacritty", "chromeshell", "genode", "gnome", "guake",
                 "iterm", "kitty", "konsole", "pantheon", "tilix", "xfce"

                ];

const toHex = _.partialRight(_.mapValues, function(color) {
  return color.toHex();
});

const toHexSlice = _.partialRight(_.mapValues, function(color) {
  return color.toHex().slice(1);
});

const toHexUpper = _.partialRight(_.mapValues, function(color) {
  return color.toHex().toUpperCase();
});

const toAvgRgbArray = _.partialRight(_.mapValues, function(color) {
  return color.toAvgRgbArray();
});

const toDoubleHex = _.partialRight(_.mapValues, function(color) {
  return color.toDoubleHex();
});

const toRgb = _.partialRight(_.mapValues, function(color) {
  return color.toRgbArray().join();
});

function createConfigFn(location, colorFn) {
  return function() {
    const file = fs.readFileSync(location, "utf8");
    const template = termcolors.export(file, colorFn);
    const data = template(colors);
    process.stdout.write(data);
    process.exit();
  };
}

const alacrittyConfig   = createConfigFn("./templates/alacritty.dot", toHexSlice);
const chromeshellConfig = createConfigFn("./templates/chrome-secure-shell.dot", toHex);
const genodeConfig      = createConfigFn("./templates/genode.dot", toHexUpper);
const gnomeConfig       = createConfigFn("./templates/gnome.dot", toHex);
const guakeConfig       = createConfigFn("./templates/guake.dot", toDoubleHex);
const itermConfig       = createConfigFn("./templates/iterm.dot", toAvgRgbArray);
const kittyConfig       = createConfigFn("./templates/kitty.dot", toHexUpper);
const konsoleConfig     = createConfigFn("./templates/konsole.dot", toRgb);
const pantheonConfig    = createConfigFn("./templates/pantheon.dot", toHex);
const tilixConfig       = createConfigFn("./templates/tilix.dot", toHexUpper);
const xfceConfig        = createConfigFn("./templates/xfce.dot", toDoubleHex);

program
  .version(pkg.version)
  .option('-l, --list', 'List available formats')
  .option('-o, --output [format]', 'Output format')
  .parse(process.argv);

if (program.list) {
  for (let i = 0; i < formats.length; i++) {
    console.log(formats[i]);
  }
  process.exit();
}

if (!program.output) {
  console.log('Must declare an output format');
  process.exit(1);
}

if (!formats.includes(program.output)) {
  console.log('Invalid output format: ', program.output);
  process.exit(1);
}

switch (program.output) {
case "alacritty":
  alacrittyConfig();
  break;
case "chromeshell":
  chromeshellConfig();
  break;
case "genode":
  genodeConfig();
  break;
case "gnome":
  gnomeConfig();
  break;
case "guake":
  guakeConfig();
  break;
case "iterm":
  itermConfig();
  break;
case "kitty":
  kittyConfig();
  break;
case "konsole":
  konsoleConfig();
  break;
case "pantheon":
  pantheonConfig();
  break;
case "tilix":
  tilixConfig();
  break;
case "xfce":
  xfceConfig();
  break;
}
